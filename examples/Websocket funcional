|wss cliente_http_ethars respuesta json json_dict dict|
wss := WebSocketServer new.

cliente_http_ethars :=  ZnClient new url: 'https://api.cryptomkt.com/v1/ticker?market=BTCARS'.

"ejecuta una request http cada 30 seg periodicamente"
		"response de la consulta http"
	respuesta := cliente_http_ethars get;
					response.
		"string del body de la response"
	json := respuesta entity string. 
	"se convierte el string devuelto en un diccionario con todos los valores de la cripto"
json_dict := NeoJSONReader fromString: json.
dict := json_dict at:'data' at:1.
"cliente_http  isSuccess ."
dict printElementsOn: Transcript. "imprime diccionario en el Transcript"
"dict class."

wss data: json.

ZnServer stopDefault.

ZnServer startDefaultOn: 1701.

ZnServer default logToTranscript.

ZnServer default delegate

map: 'crypto-servers'

to: [ :request | ZnResponse ok: (ZnEntity html:

 wss html) ];

map: 'ws-crypto-server'

to: (ZnWebSocketDelegate map: 'ws-crypto-server' to:

wss).

5 second asDelay wait.

cliente_http_ethars :=  ZnClient new url: 'https://api.cryptomkt.com/v1/ticker?market=ETHARS'.

"ejecuta una request http cada 30 seg periodicamente"
		"response de la consulta http"
	respuesta := cliente_http_ethars get;
					response.
		"string del body de la response"
	json := respuesta entity string. 
	"se convierte el string devuelto en un diccionario con todos los valores de la cripto"
json_dict := NeoJSONReader fromString: json.
dict := json_dict at:'data' at:1.
"cliente_http  isSuccess ."
dict printElementsOn: Transcript. "imprime diccionario en el Transcript"
"dict class."

wss data: json.
