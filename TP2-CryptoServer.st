Object subclass: #ClienteHTTP	instanceVariableNames: 'scheduler cliente_http_eth periodo'	classVariableNames: ''	package: 'TP2-CryptoServer'!!ClienteHTTP commentStamp: 'AlejandroFerrero 6/4/2021 15:39' prior: 0!Clase que realiza requests HTTP (metodo GET) de forma peri√≥dica a la API CryptoMkt para obtener las cotizaciones actuales de una criptomoneda. !!ClienteHTTP methodsFor: 'api' stamp: 'AlejandroFerrero 6/4/2021 15:48'!doGetRequest: aClientHTTP	| respuesta json json_dict dict |	"response de la consulta http"	respuesta := aClientHTTP		get;		response.	"string del body de la response"	json := respuesta entity string.	"se convierte el string devuelto en un diccionario con todos los valores de la cripto"	json_dict := NeoJSONReader fromString: json.	dict := json_dict at: 'data' at: 1.	^ dict! !!ClienteHTTP methodsFor: 'initialization' stamp: 'AlejandroFerrero 6/4/2021 16:26'!initialize	"se crea un scheduler que ejecuta un GET cada X segundos"	scheduler := TaskScheduler new.	"cliente http para los GET de la cripto Etherium"	cliente_http_eth := ZnClient new		url: 'https://api.cryptomkt.com/v1/ticker?market=ETHARS'.			"periodo en el cual se realizan los GET a la API CryptoMkt"	periodo := 30.! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!cliente_http_eth	^ cliente_http_eth! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!scheduler: anObject	scheduler := anObject! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!periodo	^ periodo! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!scheduler	^ scheduler! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!cliente_http_eth: anObject	cliente_http_eth := anObject! !!ClienteHTTP methodsFor: 'accessing' stamp: 'AlejandroFerrero 6/4/2021 16:27'!periodo: anObject	periodo := anObject! !!ClienteHTTP methodsFor: 'scheduling' stamp: 'AlejandroFerrero 6/4/2021 16:28'!setFuncionScheduler	"ejecuta una request http cada X seg periodicamente"		scheduler		do: [ | valoresCripto |			valoresCripto := self doGetRequest: self cliente_http_eth ]		every: self periodo seconds. 	"30 seconds for example"! !!ClienteHTTP methodsFor: 'scheduling' stamp: 'AlejandroFerrero 6/4/2021 16:41'!detenerScheduler	self scheduler stop! !!ClienteHTTP methodsFor: 'scheduling' stamp: 'AlejandroFerrero 6/4/2021 16:31'!comenzarScheduler	self scheduler start! !Object subclass: #WebSocketClient	instanceVariableNames: 'url webSocket'	classVariableNames: ''	package: 'TP2-CryptoServer'!!WebSocketClient commentStamp: 'AlejandroFerrero 6/4/2021 16:58' prior: 0!Web Socket del lado cliente.!!WebSocketClient methodsFor: 'initialization' stamp: 'AlejandroFerrero 6/4/2021 17:00'!initialize	url := 'ws://localhost:1701'.	webSocket := ZnWebSocket to: url! !Object subclass: #WebSocketServer	instanceVariableNames: 'nroPuerto'	classVariableNames: ''	package: 'TP2-CryptoServer'!!WebSocketServer commentStamp: 'AlejandroFerrero 6/4/2021 16:58' prior: 0!Web Socket del lado del servidor.!!WebSocketServer methodsFor: 'initialization' stamp: 'AlejandroFerrero 6/4/2021 16:54'!initialize	nroPuerto := 1701! !